#+SEQ_TODO: TODO CURRENT DONE
* CURRENT Bring XMLisp in to the distribution
- Removed all the comments cause havnt figured out how to hadle xml comments
- sequence is causing major problems in common lisp. Need to find a way to be
  able to add sequence token without changeing the package meaning
- X3DGroupingNodehas <xs:appinfo> <xs:attributes ...> this doesnt fit the
  pattern hence deleted.
- X3DScriptNode also has this
  <xs:appinfo><xs:attribute name="otherInterfaces"
                            type="xs:string"
                            fixed="X3DChildNode"/>
  This is being deleted.
* TODO Parse X3d using xmlisp
* TODO Implement a basic Cell
* TODO Implement meta-cell-protocol
* DONE Implement run method for transform
* TODO tests/box.lisp
** DONE Adding box.lisp test (lispify)
   NOTE: http://x3dgraphics.com/examples/X3dForWebAuthors/Chapter02-GeometryPrimitives/_pages/page01.html
** DONE Background class
** DONE Viewpoint class
** DONE Shape class
** DONE Box class
** DONE Appearance class
** DONE Material class
** DONE Implement parsing function for each
** DONE Implement GLUT windowing mechanism as scene
** CURRENT Implement default shader
*** TODO Add genertic function to initialize Shader and Program
*** TODO Initialize VAO and VBO
*** TODO Implement initialization pass
* TODO Implement def mechanism ?
* TODO Implement the basic logic of operation
** TODO read the scene into a *SCENE* global variable
** TODO  run the root node
   some logic has to come in this place for dealing with sensor nodes. May be
   the sensor nodes have to be dealt with first before anything else. I would
   like to see something like REPL to deal with such.
   read->eval->print or Control->Model->View or Input -> Processing ->Output

   So our main logic wil be read all the sensor nodes and start the evaluations.

   IDEA: Alternatively it would be good to explore what hapens if there are
   multiple sensor nodes and each starts its own thread of execution
* TODO Making opengl objects which to actual work
** DONE Shader object
** DONE Program object
** CURRENT (defuniform) macro
*** TODO Extend support for Matrix, integer and vector
** TODO (defattribute) macro
** TODO Write small sample shader for 3d.
** TODO Render box example using this sample shader
** TODO Implement Sphere source
** TODO Redo molecule application using custom spheres
** DONE Optionally use SDL example to set opengl context
** TODO Projection and model view calculations for VR
** TODO Send inputs form mouse
** TODO Handle events from gamepad
** TODO Figure out how to render onto another display
- Start a common lisp server of that session and let it go
* Misc
** TODO Add NOTICE.txt
** TODO Check if all docmentation has note to NOTICE.txt

Notes:

- It looks like windowing and gl are sort of implementation details and come at
  lower level.
- Do we need the concept of a window? Things are going to be full screen anyway
  so no.
